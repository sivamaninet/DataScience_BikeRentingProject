# Model 2: Randomn Forest Regression Model
model_rf <- randomForest(cnt~., data=X_train, mtry=3,ntree=100,
importance=TRUE, na.action=na.omit)
# Model 2: Randomn Forest Regression Model
model_rf <- randomForest(y_train~., data=X_train, mtry=3,ntree=100,
importance=TRUE, na.action=na.omit)
summary(model_rf)
predict_rf <- predict(model_rf,X_test)  # predict distance
actuals_preds_rf <- data.frame(cbind(actuals=y_test, predicteds=predict_rf))
correlation_accuracy <- cor(actuals_preds_rf)
min_max_accuracy <- mean(apply(actuals_preds_rf, 1, min) / apply(actuals_preds_rf, 1, max))
min_max_accuracy_rf <- mean(apply(actuals_preds_rf, 1, min) / apply(actuals_preds_rf, 1, max))
# min_max accuracy = 89.21%,
mape_rf <- mean(abs((actuals_preds$predicteds - actuals_preds_rf$actuals))/actuals_preds_rf$actuals)
# min_max accuracy = 89.21%,
mape_rf <- mean(abs((actuals_preds_rf$predicteds - actuals_preds_rf$actuals))/actuals_preds_rf$actuals)
df_test = data.frame(season = 1,holiday = 0,weekday = 6,weathersit = 2,temp=-0.35516960,hum=-0.76798087,windspeed = -0.38810226)
df_test$season = as.factor(df_test$season)
levels(df_test$season) <- levels(df_train$season)
df_test$holiday = as.factor(df_test$holiday)
levels(df_test$holiday) <- levels(df_train$holiday)
df_test$weekday = as.factor(df_test$weekday)
levels(df_test$weekday) <- levels(df_train$weekday)
df_test$weathersit = as.factor(df_test$weathersit)
levels(df_test$weathersit) <- levels(df_train$weathersit)
predict_lr <- predict(model_lr,df_test)  # predict distance
df_test = data.frame(yr=1,season = 1,holiday = 0,weekday = 6,weathersit = 2,temp=-0.35516960,hum=-0.76798087,windspeed = -0.38810226)
df_test$season = as.factor(df_test$season)
levels(df_test$season) <- levels(df_train$season)
df_test$holiday = as.factor(df_test$holiday)
levels(df_test$holiday) <- levels(df_train$holiday)
df_test$weekday = as.factor(df_test$weekday)
levels(df_test$weekday) <- levels(df_train$weekday)
df_test$weathersit = as.factor(df_test$weathersit)
levels(df_test$weathersit) <- levels(df_train$weathersit)
levels(df_test$yr) <- levels(df_train$yr)
predict_lr <- predict(model_lr,df_test)  # predict distance
df_test = data.frame(yr=1,mnth=1,season = 1,holiday = 0,weekday = 6,weathersit = 2,temp=-0.35516960,hum=-0.76798087,windspeed = -0.38810226)
df_test$yr = as.factor(df_test$yr)
levels(df_test$yr) <- levels(df_train$yr)
df_test$mnth = as.factor(df_test$mnth)
levels(df_test$mnth) <- levels(df_train$mnth)
df_test$season = as.factor(df_test$season)
levels(df_test$season) <- levels(df_train$season)
df_test$holiday = as.factor(df_test$holiday)
levels(df_test$holiday) <- levels(df_train$holiday)
df_test$weekday = as.factor(df_test$weekday)
levels(df_test$weekday) <- levels(df_train$weekday)
df_test$weathersit = as.factor(df_test$weathersit)
levels(df_test$weathersit) <- levels(df_train$weathersit)
predict_lr <- predict(model_lr,df_test)  # predict distance
colnames(X_train)
colnames(X_train)
plot(actuals_preds_rf$predicteds,actuals_preds_rf$actuals,
xlab="predicted",ylab="actual")
abline(a=0,b=1)
actuals_preds <- data.frame(cbind(actuals=y_test, predicteds=predict_lr))
correlation_accuracy <- cor(actuals_preds)
min_max_accuracy <- mean(apply(actuals_preds, 1, min) / apply(actuals_preds, 1, max))
mape <- mean(abs((actuals_preds$predicteds - actuals_preds$actuals))/actuals_preds$actuals)
plot(actuals_preds$predicteds,actuals_preds$actuals,
xlab="predicted",ylab="actual")
abline(a=0,b=1)
plot(actuals_preds_rf$predicteds,actuals_preds_rf$actuals,
xlab="predicted",ylab="actual")
abline(a=0,b=1)
ggplot(df_predicted,aes(y=mnth,x=cntpred))+geom_point()+geom_smooth(method="lm")
View(df_predicted)
ggplot(df_predicted,aes(y=mnth,x=cntPred))+geom_point()+geom_smooth(method="lm")
ggplot(df_predicted,aes(y=mnth,x=cntPred))+geom_bar()+geom_smooth(method="lm")
ggplot(data=df_predicted, aes(x=cntpred, y=mnth, fill=weathersit)) +
ggtitle("Weather Wise Bike Count") +
geom_bar(stat="identity")
ggplot(data=df_predicted, aes(x=cntPred, y=mnth, fill=weathersit)) +
ggtitle("Weather Wise Bike Count") +
geom_bar(stat="identity")
ggplot(data=df_predicted, aes(x=cntPred, y=mnth)) +
ggtitle("Weather Wise Bike Count") +
geom_bar(stat="identity")
qplot(mpg, data=df_predicted, geom="density", fill=cnt, alpha=I(.5),
main="Distribution of Gas Milage", xlab="Miles Per Gallon",
ylab="Density")
qplot(mnth, data=df_predicted, geom="density", fill=cnt, alpha=I(.5),
main="Distribution of Gas Milage", xlab="Miles Per Gallon",
ylab="Density")
qplot(mnth, data=df_predicted, geom="density", fill=cntPred, alpha=I(.5),
main="Distribution of Gas Milage", xlab="Miles Per Gallon",
ylab="Density")
qplot(cnt, data=df_predicted, geom="density", fill=mnth, alpha=I(.5),
main="Distribution of Gas Milage", xlab="Miles Per Gallon",
ylab="Density")
qplot(cnt, data=df_predicted, geom="density", fill=yr, alpha=I(.5),
main="Distribution of Gas Milage", xlab="Miles Per Gallon",
ylab="Density")
qplot(cntPred, data=df_predicted, geom="density", fill=yr, alpha=I(.5),
main="Distribution of Gas Milage", xlab="Miles Per Gallon",
ylab="Density")
colnames(X_train)
importance(model_rf)
importance(model_rf,type=1)
sort(importance(model_rf,type=1))
sort(importance(model_rf,type=1),)
var_importance = importance(model_rf,type=1)
var_importance$variableNames = rownames(var_importance)
var_importance = importance(model_rf,type=1)
View(var_importance)
rownames(var_importance)
df_varimp = cbind(rownames(var_importance),var_importance)
View(df_varimp)
sort(df_varimp,)
# Plot the interactive graph for better understanding
ggplot(data=df_varimp, aes(x="V1", y="%IncMSE", fill="V1")) +
ggtitle("Weather Wise Bike Count") +
geom_bar(stat="identity")
var_importance = data.frame(importance(model_rf,type=1))
df_varimp = cbind(rownames(var_importance),var_importance)
# Plot the interactive graph for better understanding
ggplot(data=df_varimp, aes(x="V1", y="%IncMSE", fill="V1")) +
ggtitle("Weather Wise Bike Count") +
geom_bar(stat="identity")
View(df_varimp)
colnames(df_varimp) = c("variableName","importance")
# Plot the interactive graph for better understanding
ggplot(data=df_varimp, aes(x="variableName", y="importance", fill="variableName")) +
ggtitle("Weather Wise Bike Count") +
geom_bar(stat="identity")
# Plot the interactive graph for better understanding
ggplot(data=df_varimp, aes(x="variableName", y="importance")) +
ggtitle("Weather Wise Bike Count") +
geom_bar(stat="identity")
# Plot the interactive graph for better understanding
ggplot(data=df_varimp, aes(x=variableName, y=importance)) +
ggtitle("Weather Wise Bike Count") +
geom_bar(stat="identity")
# Plot the interactive graph for better understanding
ggplot(data=df_varimp, aes(x=importance, y=variableName,fill=variableName)) +
ggtitle("Weather Wise Bike Count") +
geom_bar(stat="identity")
# Plot the interactive graph for better understanding
ggplot(data=df_varimp, aes(x=variableName, y=importance,fill=variableName)) +
ggtitle("Weather Wise Bike Count") +
geom_barh(stat="identity")
# Plot the interactive graph for better understanding
ggplot(data=df_varimp, aes(x=variableName, y=importance,fill=variableName)) +
ggtitle("Weather Wise Bike Count") +
geom_bar(stat="identity")
# Model 2: Randomn Forest Regression Model
model_rf <- randomForest(y_train~., data=X_train[,-yr], mtry=3,ntree=100,
importance=TRUE, na.action=na.omit)
# Model 2: Randomn Forest Regression Model
model_rf <- randomForest(y_train~., data=X_train[,-c("yr")], mtry=3,ntree=100,
importance=TRUE, na.action=na.omit)
# Model 2: Randomn Forest Regression Model
model_rf <- randomForest(y_train~., data=X_train[-c("yr"),], mtry=3,ntree=100,
importance=TRUE, na.action=na.omit)
View(X_train)
# Model 2: Randomn Forest Regression Model
model_rf <- randomForest(y_train~., data=X_train[-2,], mtry=3,ntree=100,
importance=TRUE, na.action=na.omit)
X_train$yr = NULL
# Model 2: Randomn Forest Regression Model
model_rf <- randomForest(y_train~., data=X_train, mtry=3,ntree=100,
importance=TRUE, na.action=na.omit)
predict_rf <- predict(model_rf,X_test)
actuals_preds_rf <- data.frame(cbind(actuals=y_test, predicteds=predict_rf))
correlation_accuracy <- cor(actuals_preds_rf)
min_max_accuracy_rf <- mean(apply(actuals_preds_rf, 1, min) / apply(actuals_preds_rf, 1, max))
mape_rf <- mean(abs((actuals_preds_rf$predicteds - actuals_preds_rf$actuals))/actuals_preds_rf$actuals)
var_importance = data.frame(importance(model_rf,type=1))
df_varimp = cbind(rownames(var_importance),var_importance)
colnames(df_varimp) = c("variableName","importance")
# Plot the interactive graph for better understanding
ggplot(data=df_varimp, aes(x=variableName, y=importance,fill=variableName)) +
ggtitle("Weather Wise Bike Count") +
geom_bar(stat="identity")
# Model Creation: #1. Logistic Regression
model_lr <- lm(y_train~.,data = X_train)
summary(model_lr)
predict_lr <- predict(model_lr, X_test)
actuals_preds <- data.frame(cbind(actuals=y_test, predicteds=predict_lr))
correlation_accuracy <- cor(actuals_preds)
# Build X_train, y_train, X_test, y_test
df_sample = sort(sample(nrow(df_train), nrow(df_train)*.8))
X_train<-df_train[df_sample,-11]
X_test<-df_train[-df_sample,-11]
y_train <- df_train[df_sample,11]
y_test <- df_train[-df_sample,11]
# Model Creation: #1. Logistic Regression
model_lr <- lm(y_train~.,data = X_train)
summary(model_lr)
predict_lr <- predict(model_lr, X_test)
actuals_preds <- data.frame(cbind(actuals=y_test, predicteds=predict_lr))
correlation_accuracy_lr <- cor(actuals_preds)
min_max_accuracy_lr <- mean(apply(actuals_preds, 1, min) / apply(actuals_preds, 1, max))
mape_lr <- mean(abs((actuals_preds$predicteds - actuals_preds$actuals))/actuals_preds$actuals)
actuals_preds_lr <- data.frame(cbind(actuals=y_test, predicteds=predict_lr))
correlation_accuracy_lr <- cor(actuals_preds)
min_max_accuracy_lr <- mean(apply(actuals_preds, 1, min) / apply(actuals_preds, 1, max))
mape_lr <- mean(abs((actuals_preds$predicteds - actuals_preds$actuals))/actuals_preds$actuals)
plot(actuals_preds_lr$predicteds,actuals_preds_lr$actuals,
xlab="predicted",ylab="actual")
abline(a=0,b=1)
# Model 2: Randomn Forest Regression Model
model_rf <- randomForest(y_train~., data=X_train, mtry=3,ntree=100,
importance=TRUE, na.action=na.omit)
predict_rf <- predict(model_rf,X_test)
actuals_preds_rf <- data.frame(cbind(actuals=y_test, predicteds=predict_rf))
correlation_accuracy_rf <- cor(actuals_preds_rf)
correlation_accuracy_rf <- cor(actuals_preds_rf)
min_max_accuracy_rf <- mean(apply(actuals_preds_rf, 1, min) / apply(actuals_preds_rf, 1, max))
mape_rf <- mean(abs((actuals_preds_rf$predicteds - actuals_preds_rf$actuals))/actuals_preds_rf$actuals)
plot(actuals_preds_rf$predicteds,actuals_preds_rf$actuals,
xlab="predicted",ylab="actual")
abline(a=0,b=1)
var_importance = data.frame(importance(model_rf,type=1))
df_varimp = cbind(rownames(var_importance),var_importance)
colnames(df_varimp) = c("variableName","importance")
# Plot the interactive graph for better understanding
ggplot(data=df_varimp, aes(x=variableName, y=importance,fill=variableName)) +
ggtitle("Weather Wise Bike Count") +
geom_bar(stat="identity")
# Build X_train, y_train, X_test, y_test
df_sample = sort(sample(nrow(df_train), nrow(df_train)*.8))
X_train<-df_train[df_sample,-11]
X_test<-df_train[-df_sample,-11]
y_train <- df_train[df_sample,11]
y_test <- df_train[-df_sample,11]
# Model Creation: #1. Logistic Regression
model_lr <- lm(y_train~.,data = X_train)
summary(model_lr)
predict_lr <- predict(model_lr, X_test)
actuals_preds_lr <- data.frame(cbind(actuals=y_test, predicteds=predict_lr))
correlation_accuracy_lr <- cor(actuals_preds)
min_max_accuracy_lr <- mean(apply(actuals_preds, 1, min) / apply(actuals_preds, 1, max))
mape_lr <- mean(abs((actuals_preds$predicteds - actuals_preds$actuals))/actuals_preds$actuals)
# Plot the interactive graph for better understanding
ggplot(data=df_varimp, aes(x=variableName, y=importance,fill=variableName)) +
ggtitle("Variable Importance in Random Forest Model") +
geom_bar(stat="identity")
colnames(X_train)
df_test = data.frame(season = 1,yr=1,mnth=1,holiday = 0,weekday = 6,workingday=1,weathersit = 2,temp=-0.35516960,hum=-0.76798087,windspeed = -0.38810226)
df_test$yr = as.factor(df_test$yr)
df_test$mnth = as.factor(df_test$mnth)
df_test$workingday = as.factor(df_test$workingday)
df_test$season = as.factor(df_test$season)
df_test$holiday = as.factor(df_test$holiday)
df_test$weekday = as.factor(df_test$weekday)
df_test$weathersit = as.factor(df_test$weathersit)
predict_rf <- predict(model_rf,df_test)  # predict distance
df_test$yr = as.factor(df_test$yr)
levels(df_test$yr) <- levels(df_train$yr)
df_test$mnth = as.factor(df_test$mnth)
df_test$workingday = as.factor(df_test$workingday)
levels(df_test$mnth) <- levels(df_train$mnth)
df_test$season = as.factor(df_test$season)
levels(df_test$season) <- levels(df_train$season)
df_test$holiday = as.factor(df_test$holiday)
levels(df_test$holiday) <- levels(df_train$holiday)
df_test$weekday = as.factor(df_test$weekday)
levels(df_test$weekday) <- levels(df_train$weekday)
df_test$weathersit = as.factor(df_test$weathersit)
levels(df_test$weathersit) <- levels(df_train$weathersit)
predict_rf <- predict(model_rf,df_test)  # predict distance
colnames(X_train)
colnames(df_test)
head(X_train,1)
head(df_test)
str(df_test)
predict_rf <- predict(model_rf,df_test)  # predict distance
View(df_test)
str(X_train)
levels(df_test$workingday) <- levels(df_train$workingday)
predict_rf <- predict(model_rf,df_test)  # predict distance
df_test = data.frame(
season = 1,
yr=0,
mnth=1,
holiday = 0,
weekday = 3,
workingday=1,
weathersit = 1,
temp=0.226957,
hum=0.436957,
windspeed = 0.186900
)
df_test$yr = as.factor(df_test$yr)
levels(df_test$yr) <- levels(df_train$yr)
df_test$mnth = as.factor(df_test$mnth)
levels(df_test$mnth) <- levels(df_train$mnth)
df_test$workingday = as.factor(df_test$workingday)
levels(df_test$workingday) <- levels(df_train$workingday)
df_test$season = as.factor(df_test$season)
levels(df_test$season) <- levels(df_train$season)
df_test$holiday = as.factor(df_test$holiday)
levels(df_test$holiday) <- levels(df_train$holiday)
df_test$weekday = as.factor(df_test$weekday)
levels(df_test$weekday) <- levels(df_train$weekday)
df_test$weathersit = as.factor(df_test$weathersit)
levels(df_test$weathersit) <- levels(df_train$weathersit)
predict_rf <- predict(model_rf,df_test)  # predict distance
# Save the Model
saveRDS(model_rf, "./rf_final_model.rds")
# variables for Model Test
requiredvariables = c("season","yr","mnth","holiday","weekday","workingday","weathersit","temp","hum","windspeed")
# Set the working Directory
setwd("E:\\Data Analytics\\Project2")
# Verify the working Directory
getwd()
#Remove all the variables in current environment
rm(list=ls())
# load the Test csv files
df_test = read.csv("test.csv",header=TRUE,sep=",")
modelname = "rf_final_model.rds"
# variables for Model Test
requiredvariables = c("season","yr","mnth","holiday","weekday","workingday","weathersit","temp","hum","windspeed")
df_test = df_test[requiredvariables]
#Load the Saved Model
final_model<-readRDS(modelname)
# Predict the value
final_predictions <- predict(final_model,data=df_test)
library(randomForest) # Random Forest
#Load the Saved Model
final_model<-readRDS(modelname)
# Predict the value
final_predictions <- predict(final_model,data=df_test)
# variables for Model Test
requiredvariables = c("season","yr","mnth","holiday","weekday","workingday","weathersit","temp","hum","windspeed")
df_test = df_test[requiredvariables]
View(df_test)
# Predict the value
final_predictions <- predict(final_model,data=df_test)
# Predict the value
final_predictions <- predict(final_model,newdata=df_test)
df_test$yr = as.factor(df_test$yr)
levels(df_test$yr) <- c("0","1")
levels(df_test$yr) <- c(0,1)
df_test$mnth = as.factor(df_test$mnth)
levels(df_test$mnth) <- c(1,2,3,4,5,6,7,8,9,10,11,12)
df_test$workingday = as.factor(df_test$workingday)
levels(df_test$workingday) <- c(0,1)
df_test$workingday = as.factor(df_test$workingday)
levels(df_test$workingday) <- c(0,1)
df_test$season = as.factor(df_test$season)
levels(df_test$season) <- c(1,2,3,4)
df_test$holiday = as.factor(df_test$holiday)
levels(df_test$holiday) <- c(0,1)
df_test$weekday = as.factor(df_test$weekday)
levels(df_test$weekday) <- c(0,1,2,3,4,5,6,7)
levels(df_test$weathersit) <- c(1,2,3)
df_test$weathersit = as.factor(df_test$weathersit)
#Load the Saved Model
final_model<-readRDS(modelname)
# Predict the value
final_predictions <- predict(final_model,newdata=df_test)
str(df_test)
df_test$weekday = as.factor(df_test$weekday)
levels(df_test$weekday) <- c(0,1,2,3,4,5,6)
df_test$weathersit = as.factor(df_test$weathersit)
# load the Test csv files
df_test = read.csv("test.csv",header=TRUE,sep=",")
modelname = "rf_final_model.rds"
# variables for Model Test
requiredvariables = c("season","yr","mnth","holiday","weekday","workingday","weathersit","temp","hum","windspeed")
df_test = df_test[requiredvariables]
df_test$yr = as.factor(df_test$yr)
levels(df_test$yr) <- c(0,1)
df_test$mnth = as.factor(df_test$mnth)
levels(df_test$mnth) <- c(1,2,3,4,5,6,7,8,9,10,11,12)
df_test$workingday = as.factor(df_test$workingday)
levels(df_test$workingday) <- c(0,1)
df_test$season = as.factor(df_test$season)
levels(df_test$season) <- c(1,2,3,4)
df_test$holiday = as.factor(df_test$holiday)
levels(df_test$holiday) <- c(0,1)
df_test$weekday = as.factor(df_test$weekday)
levels(df_test$weekday) <- c(0,1,2,3,4,5,6)
df_test$weathersit = as.factor(df_test$weathersit)
levels(df_test$weathersit) <- c(1,2,3)
str(df_test)
#Load the Saved Model
final_model<-readRDS(modelname)
paste("Loaded the model..", modelname,sep=":")
# Predict the value
final_predictions <- predict(final_model,newdata=df_test)
# Create new variable with Predicted Values
final_predictions
View(df_test)
# correlation_accuracy = 90.2%
# min_max accuracy = 84.67%,
# mean absolute percentage deviation = 18.52%,
mean(model_lr$residuals^2)
# Set the working Directory
setwd("E:\\Data Analytics\\Project2")
# Verify the working Directory
getwd()
#Remove all the variables in current environment
rm(list=ls())
# load the Train csv files
df_train = read.csv("day.csv",header=TRUE,sep=",")
#Summary of data
dim(df_train)
summary(df_train)
str(df_train)
#Apply Pre-processing techniques
#Pre-processing Technique #1: Convert the variables to required data types
df_train$dteday = as.Date(df_train$dteday)
df_train$yr = as.factor(df_train$yr)
df_train$mnth = as.factor(df_train$mnth)
df_train$season = as.factor(df_train$season)
df_train$holiday = as.factor(df_train$holiday)
df_train$weekday = as.factor(df_train$weekday)
df_train$workingday = as.factor(df_train$workingday)
df_train$weathersit = as.factor(df_train$weathersit)
df_train$atemp = NULL
df_train$instant = NULL
# Since the Total No. Of Bike Count is Registered + Casual
# We can drop these two variables as our target variable is "cnt"
df_train$registered = NULL
df_train$casual = NULL
# we can drop the date variable, since the values are already split to "yr","mnth","weekday"
df_train$dteday = NULL
# Replace the Outlier Values with NA
for(col in names(df_train)){
if(class(df_train[,col])=="numeric"){
print(col)
outlierdata = boxplot(df_train[,col])$out
if(length(outlierdata)>0){
print(outlierdata)
df_train[,col][df_train[,col] %in% outlierdata] = NA
}
}
}
# Get the List of Variables with NA
list_na <- colnames(df_train)[ apply(df_train, 2, anyNA) ]
# Get the Mean of each variable
average_missing <- apply(df_train[,colnames(df_train) %in% list_na],
2,
mean,
na.rm =  TRUE)
# Update the NA with Mean of each variable to replace the outlier data
for(col in names(df_train)){
if(class(df_train[,col])=="numeric"){
print(col)
df_train[,col][is.na(df_train[,col])] = average_missing[col]
}
}
# Build X_train, y_train, X_test, y_test
df_sample = sort(sample(nrow(df_train), nrow(df_train)*.8))
X_train<-df_train[df_sample,-11]
X_test<-df_train[-df_sample,-11]
y_train <- df_train[df_sample,11]
y_test <- df_train[-df_sample,11]
# Model Creation: #1. Logistic Regression
model_lr <- lm(y_train~.,data = X_train)
summary(model_lr)
predict_lr <- predict(model_lr, X_test)
actuals_preds_lr <- data.frame(cbind(actuals=y_test, predicteds=predict_lr))
correlation_accuracy_lr <- cor(actuals_preds)
correlation_accuracy_lr <- cor(actuals_preds_lr)
min_max_accuracy_lr <- mean(apply(actuals_preds_lr, 1, min) / apply(actuals_preds_lr, 1, max))
mape_lr <- mean(abs((actuals_preds_lr$predicteds - actuals_preds_lr$actuals))/actuals_preds_lr$actuals)
# correlation_accuracy = 90.2%
# min_max accuracy = 84.67%,
# mean absolute percentage deviation = 18.52%,
mean(model_lr$residuals^2)
mse_lr <- mean(model_lr$residuals^2)
# Model 2: Randomn Forest Regression Model
model_rf <- randomForest(y_train~., data=X_train, mtry=3,ntree=100,
importance=TRUE, na.action=na.omit)
predict_rf <- predict(model_rf,X_test)
actuals_preds_rf <- data.frame(cbind(actuals=y_test, predicteds=predict_rf))
correlation_accuracy_rf <- cor(actuals_preds_rf)
min_max_accuracy_rf <- mean(apply(actuals_preds_rf, 1, min) / apply(actuals_preds_rf, 1, max))
mape_rf <- mean(abs((actuals_preds_rf$predicteds - actuals_preds_rf$actuals))/actuals_preds_rf$actuals)
mse_rf <- mean(model_rf$residuals^2)
summary(model_rf)
sum((actuals_preds_lr$actuals-actuals_preds_lr$predicteds)^2)/sum((actuals_preds_lr$actuals-mean(actuals_preds_lr$actuals))^2)
rsquared_lr <- sum((actuals_preds_lr$actuals-actuals_preds_lr$predicteds)^2)/sum((actuals_preds_lr$actuals-mean(actuals_preds_lr$actuals))^2)
rsquared_lr <- sum((actuals_preds_rf$actuals-actuals_preds_rf$predicteds)^2)/sum((actuals_preds_rf$actuals-mean(actuals_preds_rf$actuals))^2)
rsquared_rf <- sum((actuals_preds_rf$actuals-actuals_preds_rf$predicteds)^2)/sum((actuals_preds_rf$actuals-mean(actuals_preds_rf$actuals))^2)
rsquared_lr <- sum((actuals_preds_lr$actuals-actuals_preds_lr$predicteds)^2)/sum((actuals_preds_lr$actuals-mean(actuals_preds_lr$actuals))^2)
# Test the Model with Sample Data
df_test = data.frame(
season = 1,
yr=0,
mnth=1,
holiday = 0,
weekday = 3,
workingday=1,
weathersit = 1,
temp=0.226957,
hum=0.436957,
windspeed = 0.186900
)
# Convert the data type and assign appropriate levels to test data
df_test$yr = as.factor(df_test$yr)
levels(df_test$yr) <- levels(df_train$yr)
df_test$mnth = as.factor(df_test$mnth)
levels(df_test$mnth) <- levels(df_train$mnth)
df_test$workingday = as.factor(df_test$workingday)
levels(df_test$workingday) <- levels(df_train$workingday)
df_test$season = as.factor(df_test$season)
levels(df_test$season) <- levels(df_train$season)
df_test$holiday = as.factor(df_test$holiday)
levels(df_test$holiday) <- levels(df_train$holiday)
df_test$weekday = as.factor(df_test$weekday)
levels(df_test$weekday) <- levels(df_train$weekday)
df_test$weathersit = as.factor(df_test$weathersit)
levels(df_test$weathersit) <- levels(df_train$weathersit)
predict_rf <- predict(model_rf,df_test)
#Remove all the variables in current environment
rm(list=ls())
